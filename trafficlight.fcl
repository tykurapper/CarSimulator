FUNCTION_BLOCK tipper // Block definition (there may be more than one block per file)

VAR_INPUT       // Define input variables
  distance : REAL;
  lightstatus   : REAL;
  deviation : REAL;
END_VAR

VAR_OUTPUT        // Define output variable
  speed : REAL;
END_VAR

FUZZIFY deviation     // Fuzzify input variable 'deviation': {'farleft', 'left' , 'middle', 'right', 'farright'}
  TERM farleft := (0, 1) (0.25, 1) (0.4, 0) ; 
  TERM left := (0.25, 0) (0.4, 1) (0.5, 0);
  TERM middle := (0.4, 0) (0.5, 1) (0.6, 0);
  TERM right := (0.5, 0) (0.6, 1) (0.75, 0);
  TERM farright:= (0.6, 0) (0.75, 1) (1, 1);
END_FUZZIFY

FUZZIFY lightstatus
  TERM green := (0, 1) (0.25, 1) (0.4, 0) ; 
  TERM less_green := (0.33, 0) (0.417, 1) (0.542, 0);
  TERM yellow := (0.458, 0) (0.542, 1) (0.708, 0);
  TERM red := (0.625, 0) (0.67, 1) (0.83, 1) (0.9, 0);
  TERM less_red:= (0.83, 0) (0.917, 1) (1, 1);
END_FUZZIFY

FUZZIFY distance
  TERM near := (0, 1) (10, 1) (17, 0) ; 
  TERM medium := (13, 0) (20, 1) (50, 1) (60, 0);
  TERM far := (50, 0) (70, 1) (200, 1);
END_FUZZIFY

DEFUZZIFY speed      // Defzzzify output variable 'steering' : {'hardright', 'right', 'straight', 'left', 'hardleft' }
  TERM stop := (0, 1) (0.05, 0);
  TERM slower := (0.025,0) (0.25,1) (0.5,0);
  TERM slow := (0.3,0) (0.6,1) (0.8,0);
  TERM medium := (0.7,0)(0.9,1)(1,1);

  METHOD : COG;   // Use 'Center Of Gravity' defuzzification method
  DEFAULT := 0.5;   // Default value is 0.5 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
  AND : MIN;      // Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
  ACT : MIN;      // Use 'min' activation method
  ACCU : MAX;     // Use 'max' accumulation method

//  RULE 1 : IF deviation IS farleft THEN speed IS slower;
//  RULE 2 : IF deviation IS left THEN speed IS slow;
//  RULE 3 : IF deviation IS middle THEN speed IS medium;
//  RULE 4 : IF deviation IS right THEN speed IS slow;
//  RULE 5 : IF deviation IS farright THEN speed IS slower;
  RULE 1 : IF lightstatus IS green AND deviation IS middle THEN speed IS medium;
  RULE 2 : IF lightstatus IS green AND deviation IS left THEN speed IS slow;
  RULE 3 : IF lightstatus IS green AND deviation IS right THEN speed IS slow;
  RULE 4 : IF lightstatus IS green AND deviation IS farleft THEN speed IS slower;
  RULE 5 : IF lightstatus IS green AND deviation IS farright THEN speed IS slower;
  RULE 6 : IF distance IS far AND deviation IS middle THEN speed IS medium;
  RULE 7 : IF distance IS far AND deviation IS left THEN speed IS slow;
  RULE 8 : IF distance IS far AND deviation IS right THEN speed IS slow;
  RULE 9 : IF distance IS far AND deviation IS farleft THEN speed IS slower;
  RULE 10 : IF distance IS far AND deviation IS farright THEN speed IS slower;
  RULE 11 : IF lightstatus IS yellow AND distance IS medium AND deviation IS middle THEN speed IS slow;
  RULE 12 : IF lightstatus IS yellow AND distance IS medium AND deviation IS left THEN speed IS slower;
  RULE 13 : IF lightstatus IS yellow AND distance IS medium AND deviation IS right THEN speed IS slower;
  RULE 14 : IF lightstatus IS yellow AND distance IS medium AND deviation IS farleft THEN speed IS slower;
  RULE 15 : IF lightstatus IS yellow AND distance IS medium AND deviation IS farright THEN speed IS slower;
  RULE 16 : IF lightstatus IS yellow AND distance IS near THEN speed IS stop;
  RULE 17 : IF lightstatus IS red AND distance IS medium AND deviation IS middle THEN speed IS slow;
  RULE 18 : IF lightstatus IS red AND distance IS medium AND deviation IS left THEN speed IS slower;
  RULE 19 : IF lightstatus IS red AND distance IS medium AND deviation IS right THEN speed IS slower;
  RULE 20 : IF lightstatus IS red AND distance IS medium AND deviation IS farleft THEN speed IS slower;
  RULE 21 : IF lightstatus IS red AND distance IS medium AND deviation IS farright THEN speed IS slower;
  RULE 22 : IF lightstatus IS red AND distance IS near THEN speed IS stop;

  RULE 23 : IF lightstatus IS less_green AND distance IS medium AND deviation IS middle THEN speed IS medium;
  RULE 24 : IF lightstatus IS less_green AND distance IS medium AND deviation IS left THEN speed IS slow;
  RULE 25 : IF lightstatus IS less_green AND distance IS medium AND deviation IS right THEN speed IS slow;
  RULE 26 : IF lightstatus IS less_green AND distance IS medium AND deviation IS farleft THEN speed IS slower;
  RULE 27 : IF lightstatus IS less_green AND distance IS medium AND deviation IS farright THEN speed IS slower;
  RULE 28 : IF lightstatus IS less_green AND distance IS near AND deviation IS middle THEN speed IS slower;
  RULE 29 : IF lightstatus IS less_green AND distance IS near AND deviation IS left THEN speed IS slower;
  RULE 30 : IF lightstatus IS less_green AND distance IS near AND deviation IS right THEN speed IS slower;
  RULE 31: IF lightstatus IS less_green AND distance IS near AND deviation IS farleft THEN speed IS stop;
  RULE 32 : IF lightstatus IS less_green AND distance IS near AND deviation IS farright THEN speed IS stop;
    
  RULE 33 : IF lightstatus IS less_red AND distance IS medium AND deviation IS middle THEN speed IS slow;
  RULE 34 : IF lightstatus IS less_red AND distance IS medium AND deviation IS left THEN speed IS slower;
  RULE 35 : IF lightstatus IS less_red AND distance IS medium AND deviation IS right THEN speed IS slower;
  RULE 36 : IF lightstatus IS less_red AND distance IS medium AND deviation IS farleft THEN speed IS slower;
  RULE 37 : IF lightstatus IS less_red AND distance IS medium AND deviation IS farright THEN speed IS slower;
  RULE 38 : IF lightstatus IS less_red AND distance IS near THEN speed IS stop;
END_RULEBLOCK

END_FUNCTION_BLOCK